name: deploy-api

on:
  push:
    branches: [ "deploy-api" ]
  pull_request:
    branches: [ "deploy-api" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 2. Spring Boot 애플리케이션 빌드 (Gradle)
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Change gradlew permissions
      run: chmod +x ./gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew ${{ secrets.DOCKER_IMAGE_API }}:build

    # 3. docker Image 메타데이터 생성 및 관리
    - name: Docker Meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v1
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_API }}
        tag-custom: |
          latest
          ${{ github.run_number }}

    # 4. DockerHub 로그인
    - name: Dockerhub login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 5. 멀티 플랫폼 대응을 위한 buildx 설정
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # 6. Docker 이미지 빌드 및 Dockerhub 이미지 푸시
    - name: Docker Build and Dockerhub Push
      uses: docker/build-push-action@v4
      with:
        context: ./omaju-app-api
        platforms: |
          linux/amd64
          linux/arm64/v8
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        label: |
          ${{ steps.docker_meta.outputs.labels }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # 7. 서버 SSH 접속 후 docker 컨테이너 배포
      - name: ssh deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME}}
          key: ${{ secrets.SERVER_KEY }} # ssh pem키 => BEGIN RSA ~ END RSA
          script: |
            sudo docker rm -f ${{ secrets.DOCKER_CONTAINER_API }}
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_API }}:latest
            sudo docker image prune -f
            sudo docker run --name ${{ secrets.DOCKER_CONTAINER_API }} -p 8000:8080 -d ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_API }}:latest
